{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\deann\\\\OneDrive\\\\Desktop\\\\Joel's Folder\\\\reduxpart2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\deann\\\\OneDrive\\\\Desktop\\\\Joel's Folder\\\\reduxpart2\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";// import { useReducer } from 'react';\nimport{UPDATE_PRODUCTS,ADD_TO_CART,UPDATE_CART_QUANTITY,REMOVE_FROM_CART,ADD_MULTIPLE_TO_CART,UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY,CLEAR_CART,TOGGLE_CART}from'./actions';var initialState={products:[],categories:[],currentCategory:'',cart:[],cartOpen:false};// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport var reducer=function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){// Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\ncase UPDATE_PRODUCTS:return _objectSpread(_objectSpread({},state),{},{products:_toConsumableArray(action.products)});case ADD_TO_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:[].concat(_toConsumableArray(state.cart),[action.product])});case ADD_MULTIPLE_TO_CART:return _objectSpread(_objectSpread({},state),{},{cart:[].concat(_toConsumableArray(state.cart),_toConsumableArray(action.products))});// Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n// If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\ncase UPDATE_CART_QUANTITY:return _objectSpread(_objectSpread({},state),{},{cartOpen:true,cart:state.cart.map(function(product){if(action._id===product._id){product.purchaseQuantity=action.purchaseQuantity;}return product;})});// First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n// If so, we remove it from our cart and set the updated state to a variable called `newState`\ncase REMOVE_FROM_CART:var newState=state.cart.filter(function(product){return product._id!==action._id;});// Then we return a copy of state and check to see if the cart is empty.\n// If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\nreturn _objectSpread(_objectSpread({},state),{},{cartOpen:newState.length>0,cart:newState});case CLEAR_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:false,cart:[]});case TOGGLE_CART:return _objectSpread(_objectSpread({},state),{},{cartOpen:!state.cartOpen});case UPDATE_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:_toConsumableArray(action.categories)});case UPDATE_CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{currentCategory:action.currentCategory});// Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n// This saves us from a crash.\ndefault:return state;}};export default reducer;","map":{"version":3,"sources":["C:/Users/deann/OneDrive/Desktop/Joel's Folder/reduxpart2/client/src/utils/reducers.js"],"names":["UPDATE_PRODUCTS","ADD_TO_CART","UPDATE_CART_QUANTITY","REMOVE_FROM_CART","ADD_MULTIPLE_TO_CART","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","CLEAR_CART","TOGGLE_CART","initialState","products","categories","currentCategory","cart","cartOpen","reducer","state","action","type","product","map","_id","purchaseQuantity","newState","filter","length"],"mappings":"2YAAA;AACA,OACEA,eADF,CAEEC,WAFF,CAGEC,oBAHF,CAIEC,gBAJF,CAKEC,oBALF,CAMEC,iBANF,CAOEC,uBAPF,CAQEC,UARF,CASEC,WATF,KAUO,WAVP,CAYA,GAAMC,CAAAA,YAAY,CAAE,CAClBC,QAAQ,CAAE,EADQ,CAElBC,UAAU,CAAE,EAFM,CAGlBC,eAAe,CAAE,EAHC,CAIlBC,IAAI,CAAE,EAJY,CAKlBC,QAAQ,CAAE,KALQ,CAApB,CAOA;AACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBP,YAAyB,IAAXQ,CAAAA,MAAW,2CACvD,OAAQA,MAAM,CAACC,IAAf,EACE;AACA,IAAKlB,CAAAA,eAAL,CACE,sCACKgB,KADL,MAEEN,QAAQ,oBAAMO,MAAM,CAACP,QAAb,CAFV,GAKF,IAAKT,CAAAA,WAAL,CACE,sCACKe,KADL,MAEEF,QAAQ,CAAE,IAFZ,CAGED,IAAI,8BAAMG,KAAK,CAACH,IAAZ,GAAkBI,MAAM,CAACE,OAAzB,EAHN,GAKF,IAAKf,CAAAA,oBAAL,CACE,sCACKY,KADL,MAEEH,IAAI,8BAAMG,KAAK,CAACH,IAAZ,qBAAqBI,MAAM,CAACP,QAA5B,EAFN,GAIF;AACA;AACA,IAAKR,CAAAA,oBAAL,CACE,sCACKc,KADL,MAEEF,QAAQ,CAAE,IAFZ,CAGED,IAAI,CAAEG,KAAK,CAACH,IAAN,CAAWO,GAAX,CAAe,SAACD,OAAD,CAAa,CAChC,GAAIF,MAAM,CAACI,GAAP,GAAeF,OAAO,CAACE,GAA3B,CAAgC,CAC9BF,OAAO,CAACG,gBAAR,CAA2BL,MAAM,CAACK,gBAAlC,CACD,CACD,MAAOH,CAAAA,OAAP,CACD,CALK,CAHR,GAWF;AACA;AACA,IAAKhB,CAAAA,gBAAL,CACE,GAAIoB,CAAAA,QAAQ,CAAGP,KAAK,CAACH,IAAN,CAAWW,MAAX,CAAkB,SAACL,OAAD,CAAa,CAC5C,MAAOA,CAAAA,OAAO,CAACE,GAAR,GAAgBJ,MAAM,CAACI,GAA9B,CACD,CAFc,CAAf,CAIA;AACA;AACA,sCACKL,KADL,MAEEF,QAAQ,CAAES,QAAQ,CAACE,MAAT,CAAkB,CAF9B,CAGEZ,IAAI,CAAEU,QAHR,GAMF,IAAKhB,CAAAA,UAAL,CACE,sCACKS,KADL,MAEEF,QAAQ,CAAE,KAFZ,CAGED,IAAI,CAAE,EAHR,GAMF,IAAKL,CAAAA,WAAL,CACE,sCACKQ,KADL,MAEEF,QAAQ,CAAE,CAACE,KAAK,CAACF,QAFnB,GAKF,IAAKT,CAAAA,iBAAL,CACE,sCACKW,KADL,MAEEL,UAAU,oBAAMM,MAAM,CAACN,UAAb,CAFZ,GAKF,IAAKL,CAAAA,uBAAL,CACE,sCACKU,KADL,MAEEJ,eAAe,CAAEK,MAAM,CAACL,eAF1B,GAKF;AACA;AACA,QACE,MAAOI,CAAAA,KAAP,CA5EJ,CA8ED,CA/EM,CAiFP,cAAeD,CAAAA,OAAf","sourcesContent":["// import { useReducer } from 'react';\nimport {\n  UPDATE_PRODUCTS,\n  ADD_TO_CART,\n  UPDATE_CART_QUANTITY,\n  REMOVE_FROM_CART,\n  ADD_MULTIPLE_TO_CART,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from './actions';\n\nconst initialState ={\n  products: [],\n  categories: [],\n  currentCategory: '',\n  cart: [],\n  cartOpen: false\n};\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n    // Returns a copy of state, sets the cartOpen to true and maps through the items in the cart.\n    // If the item's `id` matches the `id` that was provided in the action.payload, we update the purchase quantity.\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    // First we iterate through each item in the cart and check to see if the `product._id` matches the `action._id`\n    // If so, we remove it from our cart and set the updated state to a variable called `newState`\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      // Then we return a copy of state and check to see if the cart is empty.\n      // If not, we set the cartOpen status to  `true`. Then we return an updated cart array set to the value of `newState`.\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}